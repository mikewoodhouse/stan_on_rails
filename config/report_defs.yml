---
  shared:
    report_defs:
      - title: "Player Performance: {player_name}"
        subtitle: Season by season
        key: performance
        menu: false
        parameters: {'player_id': 1}
        columns:
        - field: year
          class: year
        - field: matches
        - field: innings
        sql: >
                SELECT
                  year
                , matches
                , innings
                , notout
                , highest || CASE WHEN highestnotout = 1 THEN '*' ELSE '' END high_score
                , runsscored
                , case innings
                    WHEN notout THEN null
                    ELSE CAST(runsscored AS FLOAT) / (innings - notout)
                    END bat_avg
                , fours
                , sixes
                , (overs * 6 + balls) / 6 + ((overs * 6 + balls) % 6) / 10.0 overs
                , maidens
                , wides
                , noballs
                , runs
                , wickets
                , CASE wickets
                  WHEN 0 THEN NULL
                  ELSE CAST(runs AS FLOAT) / wickets
                  END bowl_avg
                , CASE wickets
                  WHEN 0 THEN NULL
                  ELSE CAST(overs * 6 + balls AS FLOAT) / wickets
                  END strike_rate
                , runs / CAST(overs * 6 + balls AS FLOAT) * 6 econ
                , fivewktinn
                , caught
                , stumped
                , fifties
                , hundreds
                , fives
                , caughtwkt
                , captain
                , keptwicket
                FROM performances
                WHERE player_id = $1
                UNION
                SELECT
                  'TOTAL'
                , Sum(matches)
                , Sum(innings)
                , Sum(notout)
                , (SELECT MAX(highest) FROM performances WHERE player_id = $1) ||
                  CASE (
                      SELECT Max(highestnotout)
                      FROM performances
                      WHERE player_id = $1
                      AND highest = (
                          SELECT Max(highest)
                          FROM performances
                          WHERE player_id = $1)
                  ) WHEN 1 THEN '*' ELSE '' END high_score
                , Sum(runsscored)
                , CASE Sum(innings)
                  WHEN Sum(notout) THEN null
                  ELSE CAST(Sum(runsscored) AS FLOAT) / (Sum(innings) - Sum(notout))
                  END bat_avg
                , Sum(fours)
                , Sum(sixes)
                , Sum(overs * 6 + balls) / 6 + (Sum(overs * 6 + balls) % 6) / 10.0 overs
                , Sum(maidens)
                , Sum(wides)
                , Sum(noballs)
                , Sum(runs)
                , Sum(wickets)
                , CASE Sum(wickets)
                  WHEN 0 THEN NULL
                  ELSE CAST(Sum(runs) AS FLOAT) / Sum(wickets)
                  END bowl_avg
                , CASE Sum(wickets)
                  WHEN 0 THEN NULL
                  ELSE CAST(Sum(overs * 6 + balls) AS FLOAT) / Sum(wickets)
                  END strike_rate
                , 6 * Sum(runs) / CAST(Sum(overs * 6 + balls) AS FLOAT) econ
                , Sum(fivewktinn)
                , Sum(caught)
                , Sum(stumped)
                , Sum(fifties)
                , Sum(hundreds)
                , Sum(fives)
                , Sum(caughtwkt)
                , Sum(captain)
                , Sum(keptwicket)
                FROM performances
                WHERE player_id = $1
      - title: Appearances
        key: appearances
        menu: Players
        parameters: {'min_matches': 100, 'from_year': 2000}
        columns:
        - field: name
        - field: from_yr
          heading: From
          class: year
        - field: to_yr
          heading: To
          class: year
        - field: appearances
        sql: >
            WITH player_lookup AS
            (
                SELECT id
                , surname || ', ' || COALESCE(firstname, initial, '') AS name
                FROM players
            )
            SELECT
              p.id
            , lkup.name
            , min(f.year) from_yr
            , max(f.year) to_yr
            , Sum(f.matches) appearances
            FROM players p
                INNER JOIN performances f
                ON f.player_id = p.id
                INNER JOIN player_lookup lkup
                ON lkup.id = p.id
            GROUP BY
                p.id
            HAVING
                Sum(f.matches) >= $1
            AND Max(f.year) >= $2
            ORDER BY lkup.name
      - title: Captains
        key: captains
        menu: Players
        columns:
        - field: name
          heading: Name
          class: name
        - field: from_yr
          heading: From
          class: year
        - field: to_yr
          heading: To
          class: year
        - field: seasons
          heading: Seasons
        - field: matches
          heading: Matches
        - field: won
          heading: Won
        - field: pct_won
          heading: Won %
          format: pct
        - field: lost
          heading: Lost
        - field: drawn
          heading: Drawn
        - field: tied
          heading: Tied
        - field: nodecision
          heading: N/D
        sql: >
            WITH player_lookup AS
            (
              SELECT id
              , surname || ', ' || COALESCE(firstname, initial, '') AS name
              FROM players
            )
            SELECT
              p.name
            , p.id
            , Min(c.year) from_yr
            , Max(c.year) to_yr
            , Count(*) seasons
            , Sum(c.matches) matches
            , Sum(c.won) won
            , Cast(Sum(c.won) AS REAL) / Sum(c.matches) * 100.0 pct_won
            , Sum(c.lost) lost
            , Sum(c.drawn) drawn
            , Sum(c.tied) tied
            , Sum(c.nodecision) nodecision
            FROM player_lookup p
              JOIN captains c
                ON c.player_id = p.id
            GROUP BY
              p.id
            , p.name
            ORDER BY
              matches DESC